// -------------------------------------------------------------------//
// LibComp : v8.2009_3.10                                             //
// Date : Mon Aug 17 13:40:43 PDT 2009                                //
//                                                                    //
// -------------------------------------------------------------------//
// ATPG Library Created on Fri Oct  8 16:15:42 2010
array_delimiter = "[]";



model seq1
  (IQ, nextstate, CK, NOTIFIER)
(
  model_source = verilog_udp;
  input (nextstate) ( )
  input (CK) ( )  // ActiveLO Level Sensitive Clock.
  input (NOTIFIER) (no_fault = sa0 sa1; used = false;)  // Notifier.
  output (IQ) ( 
    primitive = _inv mlc_C_gate (CK, mlc_clock_net);
    primitive = _dff mlc_dff (  ,  ,mlc_clock_net , nextstate, IQ, );
  )
)

model seq2
  (IQ, SN, RN, nextstate, CK, NOTIFIER)
(
  model_source = verilog_udp;
  input (SN) ( )  //  ActiveLO Asynch. Set.
  input (RN) ( )  //  ActiveLO Asynch. Reset.
  input (nextstate) ( )
  input (CK) ( )  // Posedge Triggered Clock.
  input (NOTIFIER) (no_fault = sa0 sa1; used = false;)  // Notifier.
  output (IQ) ( 
    primitive = _inv mlc_set_gate (SN, mlc_set_net);
    primitive = _inv mlc_reset_gate (RN, mlc_reset_net);
    primitive = _and mlc_set_and_gate (RN, mlc_set_net, mlc_set_and_net);
    primitive = _dff mlc_dff ( mlc_set_and_net, mlc_reset_net, CK, nextstate, IQ, );
  )
)


model seq3
  (IQ, RN, nextstate, CK, NOTIFIER)
(
  model_source = verilog_udp;
  input (RN) ( )  //  ActiveLO Asynch. Reset.
  input (nextstate) ( )
  input (CK) ( )  // Posedge Triggered Clock.
  input (NOTIFIER) (no_fault = sa0 sa1; used = false;)  // Notifier.
  output (IQ) ( 
    primitive = _inv mlc_reset_gate (RN, mlc_reset_net);
    primitive = _dff mlc_dff (  , mlc_reset_net, CK, nextstate, IQ, );
  )
)

model seq4
  (IQ, nextstate, CK, NOTIFIER)
(
  model_source = verilog_udp;
  input (nextstate) ( )
  input (CK) ( )  // ActiveLO Level Sensitive Clock.
  input (NOTIFIER) (no_fault = sa0 sa1; used = false;)  // Notifier.
  output (IQ) ( 
    primitive = _inv mlc_C_gate (CK, mlc_clock_net);
    primitive = _dlat mlc_latch (  ,  , mlc_clock_net, nextstate, IQ, );
  )
)

model AND2_X1
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _and  mlc_and_1 ( A1, A2, ZN );
  )
)

model AND2_X2
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _and  mlc_and_1 ( A1, A2, ZN );
  )
)

model AND2_X4
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _and  mlc_and_1 ( A1, A2, ZN );
  )
)

model AND3_X1
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _and  mlc_and_1 ( i_62, A3, ZN );
    primitive = _and  mlc_and_2 ( A1, A2, i_62 );
  )
)

model AND3_X2
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _and  mlc_and_1 ( i_62, A3, ZN );
    primitive = _and  mlc_and_2 ( A1, A2, i_62 );
  )
)

model AND3_X4
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _and  mlc_and_1 ( i_42, A3, ZN );
    primitive = _and  mlc_and_2 ( A1, A2, i_42 );
  )
)

model AND4_X1
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _and  mlc_and_1 ( i_4, A4, ZN );
    primitive = _and  mlc_and_2 ( i_5, A3, i_4 );
    primitive = _and  mlc_and_3 ( A1, A2, i_5 );
  )
)

model AND4_X2
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _and  mlc_and_1 ( i_4, A4, ZN );
    primitive = _and  mlc_and_2 ( i_5, A3, i_4 );
    primitive = _and  mlc_and_3 ( A1, A2, i_5 );
  )
)

model AND4_X4
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _and  mlc_and_1 ( i_4, A4, ZN );
    primitive = _and  mlc_and_2 ( i_5, A3, i_4 );
    primitive = _and  mlc_and_3 ( A1, A2, i_5 );
  )
)

model ANTENNA_X1
  (A)
(
  model_source = verilog_module;
  input (A) (used=false; no_fault = sa0 sa1;)
)  // Empty Verilog Module.

model AOI211_X1
  (A, B, C1, C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _or  mlc_or_1 ( i_7, A, i_6 );
    primitive = _or  mlc_or_2 ( i_8, B, i_7 );
    primitive = _and  mlc_and_1 ( C1, C2, i_8 );
  )
)

model AOI211_X2
  (A, B, C1, C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _or  mlc_or_1 ( i_7, A, i_6 );
    primitive = _or  mlc_or_2 ( i_8, B, i_7 );
    primitive = _and  mlc_and_1 ( C1, C2, i_8 );
  )
)

model AOI211_X4
  (A, B, C1, C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _or  mlc_or_1 ( i_7, A, i_6 );
    primitive = _or  mlc_or_2 ( i_8, B, i_7 );
    primitive = _and  mlc_and_1 ( C1, C2, i_8 );
  )
)

model AOI21_X1
  (A, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_4, ZN );
    primitive = _or  mlc_or_1 ( A, i_5, i_4 );
    primitive = _and  mlc_and_1 ( B1, B2, i_5 );
  )
)

model AOI21_X2
  (A, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_44, ZN );
    primitive = _or  mlc_or_1 ( A, i_45, i_44 );
    primitive = _and  mlc_and_1 ( B1, B2, i_45 );
  )
)

model AOI21_X4
  (A, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_44, ZN );
    primitive = _or  mlc_or_1 ( A, i_45, i_44 );
    primitive = _and  mlc_and_1 ( B1, B2, i_45 );
  )
)

model AOI221_X1
  (A, B1, B2, C1,
  C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_8, ZN );
    primitive = _or  mlc_or_1 ( i_9, i_11, i_8 );
    primitive = _or  mlc_or_2 ( i_10, A, i_9 );
    primitive = _and  mlc_and_1 ( C1, C2, i_10 );
    primitive = _and  mlc_and_2 ( B1, B2, i_11 );
  )
)

model AOI221_X2
  (A, B1, B2, C1,
  C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_8, ZN );
    primitive = _or  mlc_or_1 ( i_9, i_11, i_8 );
    primitive = _or  mlc_or_2 ( i_10, A, i_9 );
    primitive = _and  mlc_and_1 ( C1, C2, i_10 );
    primitive = _and  mlc_and_2 ( B1, B2, i_11 );
  )
)

model AOI221_X4
  (A, B1, B2, C1,
  C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_8, ZN );
    primitive = _or  mlc_or_1 ( i_9, i_11, i_8 );
    primitive = _or  mlc_or_2 ( i_10, A, i_9 );
    primitive = _and  mlc_and_1 ( C1, C2, i_10 );
    primitive = _and  mlc_and_2 ( B1, B2, i_11 );
  )
)

model AOI222_X1
  (A1, A2, B1, B2,
  C1, C2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_10, ZN );
    primitive = _or  mlc_or_1 ( i_11, i_14, i_10 );
    primitive = _or  mlc_or_2 ( i_12, i_13, i_11 );
    primitive = _and  mlc_and_1 ( A1, A2, i_12 );
    primitive = _and  mlc_and_2 ( B1, B2, i_13 );
    primitive = _and  mlc_and_3 ( C1, C2, i_14 );
  )
)

model AOI222_X2
  (A1, A2, B1, B2,
  C1, C2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_10, ZN );
    primitive = _or  mlc_or_1 ( i_11, i_14, i_10 );
    primitive = _or  mlc_or_2 ( i_12, i_13, i_11 );
    primitive = _and  mlc_and_1 ( A1, A2, i_12 );
    primitive = _and  mlc_and_2 ( B1, B2, i_13 );
    primitive = _and  mlc_and_3 ( C1, C2, i_14 );
  )
)

model AOI222_X4
  (A1, A2, B1, B2,
  C1, C2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_10, ZN );
    primitive = _or  mlc_or_1 ( i_11, i_14, i_10 );
    primitive = _or  mlc_or_2 ( i_12, i_13, i_11 );
    primitive = _and  mlc_and_1 ( A1, A2, i_12 );
    primitive = _and  mlc_and_2 ( B1, B2, i_13 );
    primitive = _and  mlc_and_3 ( C1, C2, i_14 );
  )
)

model AOI22_X1
  (A1, A2, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _or  mlc_or_1 ( i_7, i_8, i_6 );
    primitive = _and  mlc_and_1 ( A1, A2, i_7 );
    primitive = _and  mlc_and_2 ( B1, B2, i_8 );
  )
)

model AOI22_X2
  (A1, A2, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _or  mlc_or_1 ( i_7, i_8, i_6 );
    primitive = _and  mlc_and_1 ( A1, A2, i_7 );
    primitive = _and  mlc_and_2 ( B1, B2, i_8 );
  )
)

model AOI22_X4
  (A1, A2, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _or  mlc_or_1 ( i_7, i_8, i_6 );
    primitive = _and  mlc_and_1 ( A1, A2, i_7 );
    primitive = _and  mlc_and_2 ( B1, B2, i_8 );
  )
)

model BUF_X1
  (A, Z)
(
  model_source = verilog_module;
  input (A) ( )
  output (Z) (
    primitive = _buf  mlc_buf_1 ( A, Z );
  )
)

model BUF_X16
  (A, Z)
(
  model_source = verilog_module;
  input (A) ( )
  output (Z) (
    primitive = _buf  mlc_buf_1 ( A, Z );
  )
)

model BUF_X2
  (A, Z)
(
  model_source = verilog_module;
  input (A) ( )
  output (Z) (
    primitive = _buf  mlc_buf_1 ( A, Z );
  )
)

model BUF_X32
  (A, Z)
(
  model_source = verilog_module;
  input (A) ( )
  output (Z) (
    primitive = _buf  mlc_buf_1 ( A, Z );
  )
)

model BUF_X4
  (A, Z)
(
  model_source = verilog_module;
  input (A) ( )
  output (Z) (
    primitive = _buf  mlc_buf_1 ( A, Z );
  )
)

model BUF_X8
  (A, Z)
(
  model_source = verilog_module;
  input (A) ( )
  output (Z) (
    primitive = _buf  mlc_buf_1 ( A, Z );
  )
)

model CLKBUF_X1
  (A, Z)
(
  model_source = verilog_module;
  input (A) ( )
  output (Z) (
    primitive = _buf  mlc_buf_1 ( A, Z );
  )
)

model CLKBUF_X2
  (A, Z)
(
  model_source = verilog_module;
  input (A) ( )
  output (Z) (
    primitive = _buf  mlc_buf_1 ( A, Z );
  )
)

model CLKBUF_X3
  (A, Z)
(
  model_source = verilog_module;
  input (A) ( )
  output (Z) (
    primitive = _buf  mlc_buf_1 ( A, Z );
  )
)

model CLKGATETST_X1
  (CK, E, SE, GCK)
(
  model_source = verilog_module;
  input (CK) ( )
  input (E) ( )
  input (SE) ( )
  output (GCK) (
    primitive = _and  mlc_and_1 ( IQ, CK, GCK );
    instance = seq4  mlc_inst1 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _or  mlc_or_1 ( E, SE, nextstate );
  )
)

model CLKGATETST_X2
  (CK, E, SE, GCK)
(
  model_source = verilog_module;
  input (CK) ( )
  input (E) ( )
  input (SE) ( )
  output (GCK) (
    primitive = _and  mlc_and_1 ( IQ, CK, GCK );
    instance = seq4  mlc_inst2 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _or  mlc_or_1 ( E, SE, nextstate );
  )
)

model CLKGATETST_X4
  (CK, E, SE, GCK)
(
  model_source = verilog_module;
  input (CK) ( )
  input (E) ( )
  input (SE) ( )
  output (GCK) (
    primitive = _and  mlc_and_1 ( IQ, CK, GCK );
    instance = seq4  mlc_inst3 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _or  mlc_or_1 ( E, SE, nextstate );
  )
)

model CLKGATETST_X8
  (CK, E, SE, GCK)
(
  model_source = verilog_module;
  input (CK) ( )
  input (E) ( )
  input (SE) ( )
  output (GCK) (
    primitive = _and  mlc_and_1 ( IQ, CK, GCK );
    instance = seq4  mlc_inst4 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _or  mlc_or_1 ( E, SE, nextstate );
  )
)

model CLKGATE_X1
  (CK, E, GCK)
(
  model_source = verilog_module;
  input (CK) ( )
  input (E) ( )
  output (GCK) (
    primitive = _and  mlc_and_1 ( CK, IQ, GCK );
    instance = seq4  mlc_inst5 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _buf  mlc_buf_1 ( E, nextstate );
  )
)

model CLKGATE_X2
  (CK, E, GCK)
(
  model_source = verilog_module;
  input (CK) ( )
  input (E) ( )
  output (GCK) (
    primitive = _and  mlc_and_1 ( CK, IQ, GCK );
    instance = seq4  mlc_inst6 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _buf  mlc_buf_1 ( E, nextstate );
  )
)

model CLKGATE_X4
  (CK, E, GCK)
(
  model_source = verilog_module;
  input (CK) ( )
  input (E) ( )
  output (GCK) (
    primitive = _and  mlc_and_1 ( CK, IQ, GCK );
    instance = seq4  mlc_inst7 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _buf  mlc_buf_1 ( E, nextstate );
  )
)

model CLKGATE_X8
  (CK, E, GCK)
(
  model_source = verilog_module;
  input (CK) ( )
  input (E) ( )
  output (GCK) (
    primitive = _and  mlc_and_1 ( CK, IQ, GCK );
    instance = seq4  mlc_inst8 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _buf  mlc_buf_1 ( E, nextstate );
  )
)

model DFFRS_X1
  (CK, D, RN, SN,
  Q, QN)
(
  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (RN) ( )
  input (SN) ( )
  output (Q) ()
  output (QN) (
    instance = seq2  mlc_inst9 ( IQ, SN, RN, nextstate, 
      CK, NOTIFIER );
    primitive = _and  mlc_and_1 ( i_5, i_6, IQN );
    primitive = _inv  mlc_inv_1 ( IQ, i_5 );
    primitive = _inv  mlc_inv_2 ( i_7, i_6 );
    primitive = _and  mlc_and_2 ( i_8, i_9, i_7 );
    primitive = _inv  mlc_inv_3 ( SN, i_8 );
    primitive = _inv  mlc_inv_4 ( RN, i_9 );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _buf  mlc_buf_3 ( D, nextstate );
  )
)

model DFFRS_X2
  (CK, D, RN, SN,
  Q, QN)
(
  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (RN) ( )
  input (SN) ( )
  output (Q) ()
  output (QN) (
    instance = seq2  mlc_inst10 ( IQ, SN, RN, nextstate, 
      CK, NOTIFIER );
    primitive = _and  mlc_and_1 ( i_5, i_6, IQN );
    primitive = _inv  mlc_inv_1 ( IQ, i_5 );
    primitive = _inv  mlc_inv_2 ( i_7, i_6 );
    primitive = _and  mlc_and_2 ( i_8, i_9, i_7 );
    primitive = _inv  mlc_inv_3 ( SN, i_8 );
    primitive = _inv  mlc_inv_4 ( RN, i_9 );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _buf  mlc_buf_3 ( D, nextstate );
  )
)

model DFFR_X1
  (CK, D, RN, Q, QN)
(
  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (RN) ( )
  output (Q) ()
  output (QN) (
    instance = seq3  mlc_inst11 ( IQ, RN, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _buf  mlc_buf_3 ( D, nextstate );
  )
)

model DFFR_X2
  (CK, D, RN, Q, QN)
(
  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (RN) ( )
  output (Q) ()
  output (QN) (
    instance = seq3  mlc_inst12 ( IQ, RN, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _buf  mlc_buf_3 ( D, nextstate );
  )
)

model DFFS_X1
  (CK, D, SN, Q, QN)
(
  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (SN) ( )
  output (Q) ()
  output (QN) (
    instance = seq3  mlc_inst13 ( IQ, SN, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _buf  mlc_buf_3 ( D, nextstate );
  )
)

model DFFS_X2
  (CK, D, SN, Q, QN)
(
  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (SN) ( )
  output (Q) ()
  output (QN) (
    instance = seq3  mlc_inst14 ( IQ, SN, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _buf  mlc_buf_3 ( D, nextstate );
  )
)

model DFF_X1
  (CK, D, Q, QN)
(
  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  output (Q) ()
  output (QN) (
    instance = seq1  mlc_inst15 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _buf  mlc_buf_3 ( D, nextstate );
  )
)

model DFF_X2
  (CK, D, Q, QN)
(
  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  output (Q) ()
  output (QN) (
    instance = seq1  mlc_inst16 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _buf  mlc_buf_3 ( D, nextstate );
  )
)

model DLH_X1
  (D, G, Q)
(
  model_source = verilog_module;
  input (D) ( )
  input (G) ( )
  output (Q) (
    instance = seq4  mlc_inst17 ( IQ, nextstate, G, NOTIFIER );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( D, nextstate );
  )
)

model DLH_X2
  (D, G, Q)
(
  model_source = verilog_module;
  input (D) ( )
  input (G) ( )
  output (Q) (
    instance = seq4  mlc_inst18 ( IQ, nextstate, G, NOTIFIER );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( D, nextstate );
  )
)

model DLL_X1
  (D, GN, Q)
(
  model_source = verilog_module;
  input (D) ( )
  input (GN) ( )
  output (Q) (
    instance = seq4  mlc_inst19 ( IQ, nextstate, GN, NOTIFIER );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( D, nextstate );
  )
)

model DLL_X2
  (D, GN, Q)
(
  model_source = verilog_module;
  input (D) ( )
  input (GN) ( )
  output (Q) (
    instance = seq4  mlc_inst20 ( IQ, nextstate, GN, NOTIFIER );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( D, nextstate );
  )
)

model FA_X1
  (A, B, CI, CO, S)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  input (CI) ( )
  output (CO) ()
  output (S) (
    primitive = _or  mlc_or_1 ( i_8, i_9, CO );
    primitive = _and  mlc_and_1 ( A, B, i_8 );
    primitive = _and  mlc_and_2 ( CI, i_10, i_9 );
    primitive = _or  mlc_or_2 ( A, B, i_10 );
    primitive = _xor  mlc_xor_1 ( CI, i_14, S );
    primitive = _xor  mlc_xor_2 ( A, B, i_14 );
  )
)

model FILLCELL_X1
  ( )
(
  model_source = verilog_module;
)  // Empty Verilog Module.

model FILLCELL_X16
  ( )
(
  model_source = verilog_module;
)  // Empty Verilog Module.

model FILLCELL_X2
  ( )
(
  model_source = verilog_module;
)  // Empty Verilog Module.

model FILLCELL_X32
  ( )
(
  model_source = verilog_module;
)  // Empty Verilog Module.

model FILLCELL_X4
  ( )
(
  model_source = verilog_module;
)  // Empty Verilog Module.

model FILLCELL_X8
  ( )
(
  model_source = verilog_module;
)  // Empty Verilog Module.

model HA_X1
  (A, B, CO, S)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  output (CO) ()
  output (S) (
    primitive = _and  mlc_and_1 ( A, B, CO );
    primitive = _xor  mlc_xor_1 ( A, B, S );
  )
)

model INV_X1
  (A, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( A, ZN );
  )
)

model INV_X16
  (A, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( A, ZN );
  )
)

model INV_X2
  (A, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( A, ZN );
  )
)

model INV_X32
  (A, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( A, ZN );
  )
)

model INV_X4
  (A, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( A, ZN );
  )
)

model INV_X8
  (A, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( A, ZN );
  )
)

model LOGIC0_X1
  (Z)
(
  model_source = verilog_module;
  output (Z) (
    primitive = _buf  mlc_buf_1 ( mlc_n0, Z );
    primitive = _tie0  mlc_tie0_1 ( mlc_n0 );
  )
)

model LOGIC1_X1
  (Z)
(
  model_source = verilog_module;
  output (Z) (
    primitive = _buf  mlc_buf_1 ( mlc_n1, Z );
    primitive = _tie1  mlc_tie1_1 ( mlc_n1 );
  )
)

model MUX2_X1
  (A, B, S, Z)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  input (S) ( )
  output (Z) (
    primitive = _or  mlc_or_1 ( i_26, i_27, Z );
    primitive = _and  mlc_and_1 ( S, B, i_26 );
    primitive = _and  mlc_and_2 ( A, i_28, i_27 );
    primitive = _inv  mlc_inv_1 ( S, i_28 );
  )
)

model MUX2_X2
  (A, B, S, Z)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  input (S) ( )
  output (Z) (
    primitive = _or  mlc_or_1 ( i_46, i_47, Z );
    primitive = _and  mlc_and_1 ( S, B, i_46 );
    primitive = _and  mlc_and_2 ( A, i_48, i_47 );
    primitive = _inv  mlc_inv_1 ( S, i_48 );
  )
)

model NAND2_X1
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_2, ZN );
    primitive = _and  mlc_and_1 ( A1, A2, i_2 );
  )
)

model NAND2_X2
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_2, ZN );
    primitive = _and  mlc_and_1 ( A1, A2, i_2 );
  )
)

model NAND2_X4
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_2, ZN );
    primitive = _and  mlc_and_1 ( A1, A2, i_2 );
  )
)

model NAND3_X1
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_24, ZN );
    primitive = _and  mlc_and_1 ( i_25, A3, i_24 );
    primitive = _and  mlc_and_2 ( A1, A2, i_25 );
  )
)

model NAND3_X2
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_24, ZN );
    primitive = _and  mlc_and_1 ( i_25, A3, i_24 );
    primitive = _and  mlc_and_2 ( A1, A2, i_25 );
  )
)

model NAND3_X4
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_4, ZN );
    primitive = _and  mlc_and_1 ( i_5, A3, i_4 );
    primitive = _and  mlc_and_2 ( A1, A2, i_5 );
  )
)

model NAND4_X1
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _and  mlc_and_1 ( i_7, A4, i_6 );
    primitive = _and  mlc_and_2 ( i_8, A3, i_7 );
    primitive = _and  mlc_and_3 ( A1, A2, i_8 );
  )
)

model NAND4_X2
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _and  mlc_and_1 ( i_7, A4, i_6 );
    primitive = _and  mlc_and_2 ( i_8, A3, i_7 );
    primitive = _and  mlc_and_3 ( A1, A2, i_8 );
  )
)

model NAND4_X4
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _and  mlc_and_1 ( i_7, A4, i_6 );
    primitive = _and  mlc_and_2 ( i_8, A3, i_7 );
    primitive = _and  mlc_and_3 ( A1, A2, i_8 );
  )
)

model NOR2_X1
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_62, ZN );
    primitive = _or  mlc_or_1 ( A1, A2, i_62 );
  )
)

model NOR2_X2
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_42, ZN );
    primitive = _or  mlc_or_1 ( A1, A2, i_42 );
  )
)

model NOR2_X4
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_62, ZN );
    primitive = _or  mlc_or_1 ( A1, A2, i_62 );
  )
)

model NOR3_X1
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_4, ZN );
    primitive = _or  mlc_or_1 ( i_5, A3, i_4 );
    primitive = _or  mlc_or_2 ( A1, A2, i_5 );
  )
)

model NOR3_X2
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_4, ZN );
    primitive = _or  mlc_or_1 ( i_5, A3, i_4 );
    primitive = _or  mlc_or_2 ( A1, A2, i_5 );
  )
)

model NOR3_X4
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_4, ZN );
    primitive = _or  mlc_or_1 ( i_5, A3, i_4 );
    primitive = _or  mlc_or_2 ( A1, A2, i_5 );
  )
)

model NOR4_X1
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _or  mlc_or_1 ( i_7, A4, i_6 );
    primitive = _or  mlc_or_2 ( i_8, A3, i_7 );
    primitive = _or  mlc_or_3 ( A1, A2, i_8 );
  )
)

model NOR4_X2
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _or  mlc_or_1 ( i_7, A4, i_6 );
    primitive = _or  mlc_or_2 ( i_8, A3, i_7 );
    primitive = _or  mlc_or_3 ( A1, A2, i_8 );
  )
)

model NOR4_X4
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _or  mlc_or_1 ( i_7, A4, i_6 );
    primitive = _or  mlc_or_2 ( i_8, A3, i_7 );
    primitive = _or  mlc_or_3 ( A1, A2, i_8 );
  )
)

model OAI211_X1
  (A, B, C1, C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _and  mlc_and_1 ( i_7, B, i_6 );
    primitive = _and  mlc_and_2 ( i_8, A, i_7 );
    primitive = _or  mlc_or_1 ( C1, C2, i_8 );
  )
)

model OAI211_X2
  (A, B, C1, C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _and  mlc_and_1 ( i_7, B, i_6 );
    primitive = _and  mlc_and_2 ( i_8, A, i_7 );
    primitive = _or  mlc_or_1 ( C1, C2, i_8 );
  )
)

model OAI211_X4
  (A, B, C1, C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _and  mlc_and_1 ( i_7, B, i_6 );
    primitive = _and  mlc_and_2 ( i_8, A, i_7 );
    primitive = _or  mlc_or_1 ( C1, C2, i_8 );
  )
)

model OAI21_X1
  (A, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_4, ZN );
    primitive = _and  mlc_and_1 ( A, i_5, i_4 );
    primitive = _or  mlc_or_1 ( B1, B2, i_5 );
  )
)

model OAI21_X2
  (A, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_4, ZN );
    primitive = _and  mlc_and_1 ( A, i_5, i_4 );
    primitive = _or  mlc_or_1 ( B1, B2, i_5 );
  )
)

model OAI21_X4
  (A, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_4, ZN );
    primitive = _and  mlc_and_1 ( A, i_5, i_4 );
    primitive = _or  mlc_or_1 ( B1, B2, i_5 );
  )
)

model OAI221_X1
  (A, B1, B2, C1,
  C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_8, ZN );
    primitive = _and  mlc_and_1 ( i_9, i_11, i_8 );
    primitive = _and  mlc_and_2 ( i_10, A, i_9 );
    primitive = _or  mlc_or_1 ( C1, C2, i_10 );
    primitive = _or  mlc_or_2 ( B1, B2, i_11 );
  )
)

model OAI221_X2
  (A, B1, B2, C1,
  C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_8, ZN );
    primitive = _and  mlc_and_1 ( i_9, i_11, i_8 );
    primitive = _and  mlc_and_2 ( i_10, A, i_9 );
    primitive = _or  mlc_or_1 ( C1, C2, i_10 );
    primitive = _or  mlc_or_2 ( B1, B2, i_11 );
  )
)

model OAI221_X4
  (A, B1, B2, C1,
  C2, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_8, ZN );
    primitive = _and  mlc_and_1 ( i_9, i_11, i_8 );
    primitive = _and  mlc_and_2 ( i_10, A, i_9 );
    primitive = _or  mlc_or_1 ( C1, C2, i_10 );
    primitive = _or  mlc_or_2 ( B1, B2, i_11 );
  )
)

model OAI222_X1
  (A1, A2, B1, B2,
  C1, C2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_10, ZN );
    primitive = _and  mlc_and_1 ( i_11, i_14, i_10 );
    primitive = _and  mlc_and_2 ( i_12, i_13, i_11 );
    primitive = _or  mlc_or_1 ( A1, A2, i_12 );
    primitive = _or  mlc_or_2 ( B1, B2, i_13 );
    primitive = _or  mlc_or_3 ( C1, C2, i_14 );
  )
)

model OAI222_X2
  (A1, A2, B1, B2,
  C1, C2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_10, ZN );
    primitive = _and  mlc_and_1 ( i_11, i_14, i_10 );
    primitive = _and  mlc_and_2 ( i_12, i_13, i_11 );
    primitive = _or  mlc_or_1 ( A1, A2, i_12 );
    primitive = _or  mlc_or_2 ( B1, B2, i_13 );
    primitive = _or  mlc_or_3 ( C1, C2, i_14 );
  )
)

model OAI222_X4
  (A1, A2, B1, B2,
  C1, C2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_10, ZN );
    primitive = _and  mlc_and_1 ( i_11, i_14, i_10 );
    primitive = _and  mlc_and_2 ( i_12, i_13, i_11 );
    primitive = _or  mlc_or_1 ( A1, A2, i_12 );
    primitive = _or  mlc_or_2 ( B1, B2, i_13 );
    primitive = _or  mlc_or_3 ( C1, C2, i_14 );
  )
)

model OAI22_X1
  (A1, A2, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _and  mlc_and_1 ( i_7, i_8, i_6 );
    primitive = _or  mlc_or_1 ( A1, A2, i_7 );
    primitive = _or  mlc_or_2 ( B1, B2, i_8 );
  )
)

model OAI22_X2
  (A1, A2, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _and  mlc_and_1 ( i_7, i_8, i_6 );
    primitive = _or  mlc_or_1 ( A1, A2, i_7 );
    primitive = _or  mlc_or_2 ( B1, B2, i_8 );
  )
)

model OAI22_X4
  (A1, A2, B1, B2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_6, ZN );
    primitive = _and  mlc_and_1 ( i_7, i_8, i_6 );
    primitive = _or  mlc_or_1 ( A1, A2, i_7 );
    primitive = _or  mlc_or_2 ( B1, B2, i_8 );
  )
)

model OAI33_X1
  (A1, A2, A3, B1,
  B2, B3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (B1) ( )
  input (B2) ( )
  input (B3) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_10, ZN );
    primitive = _and  mlc_and_1 ( i_11, i_13, i_10 );
    primitive = _or  mlc_or_1 ( i_12, A3, i_11 );
    primitive = _or  mlc_or_2 ( A1, A2, i_12 );
    primitive = _or  mlc_or_3 ( i_14, B3, i_13 );
    primitive = _or  mlc_or_4 ( B1, B2, i_14 );
  )
)

model OR2_X1
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _or  mlc_or_1 ( A1, A2, ZN );
  )
)

model OR2_X2
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _or  mlc_or_1 ( A1, A2, ZN );
  )
)

model OR2_X4
  (A1, A2, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  output (ZN) (
    primitive = _or  mlc_or_1 ( A1, A2, ZN );
  )
)

model OR3_X1
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _or  mlc_or_1 ( i_2, A3, ZN );
    primitive = _or  mlc_or_2 ( A1, A2, i_2 );
  )
)

model OR3_X2
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _or  mlc_or_1 ( i_2, A3, ZN );
    primitive = _or  mlc_or_2 ( A1, A2, i_2 );
  )
)

model OR3_X4
  (A1, A2, A3, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) (
    primitive = _or  mlc_or_1 ( i_2, A3, ZN );
    primitive = _or  mlc_or_2 ( A1, A2, i_2 );
  )
)

model OR4_X1
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _or  mlc_or_1 ( i_4, A4, ZN );
    primitive = _or  mlc_or_2 ( i_5, A3, i_4 );
    primitive = _or  mlc_or_3 ( A1, A2, i_5 );
  )
)

model OR4_X2
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _or  mlc_or_1 ( i_4, A4, ZN );
    primitive = _or  mlc_or_2 ( i_5, A3, i_4 );
    primitive = _or  mlc_or_3 ( A1, A2, i_5 );
  )
)

model OR4_X4
  (A1, A2, A3, A4, ZN)
(
  model_source = verilog_module;
  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) (
    primitive = _or  mlc_or_1 ( i_4, A4, ZN );
    primitive = _or  mlc_or_2 ( i_5, A3, i_4 );
    primitive = _or  mlc_or_3 ( A1, A2, i_5 );
  )
)

model SDFFRS_X1
  (CK, D, RN, SE,
  SI, SN, Q, QN)
(
scan_definition (
    type = mux_scan;
    data_in = D ;
    scan_in = SI ;
    scan_enable = SE ;
    scan_out = Q, QN ;
    non_scan_model = DFFRS_X1(CK, D, RN,SN, Q, QN) ;
  )

  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (RN) ( )
  input (SE) ( )
  input (SI) ( )
  input (SN) ( )
  output (Q) ()
  output (QN) (
    instance = seq2  mlc_inst21 ( IQ, SN, RN, nextstate, 
      CK, NOTIFIER );
    primitive = _and  mlc_and_1 ( i_11, i_12, IQN );
    primitive = _inv  mlc_inv_1 ( IQ, i_11 );
    primitive = _inv  mlc_inv_2 ( i_13, i_12 );
    primitive = _and  mlc_and_2 ( i_14, i_15, i_13 );
    primitive = _inv  mlc_inv_3 ( SN, i_14 );
    primitive = _inv  mlc_inv_4 ( RN, i_15 );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _or  mlc_or_1 ( i_16, i_17, nextstate );
    primitive = _and  mlc_and_3 ( SE, SI, i_16 );
    primitive = _and  mlc_and_4 ( D, i_18, i_17 );
    primitive = _inv  mlc_inv_5 ( SE, i_18 );
  )
)

model SDFFRS_X2
  (CK, D, RN, SE,
  SI, SN, Q, QN)
(
scan_definition (
    type = mux_scan;
    data_in = D ;
    scan_in = SI ;
    scan_enable = SE ;
    scan_out = Q, QN ;
    non_scan_model = DFFRS_X2(CK, D, RN, SN, Q, QN) ;
  )

  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (RN) ( )
  input (SE) ( )
  input (SI) ( )
  input (SN) ( )
  output (Q) ()
  output (QN) (
    instance = seq2  mlc_inst22 ( IQ, SN, RN, nextstate, 
      CK, NOTIFIER );
    primitive = _and  mlc_and_1 ( i_11, i_12, IQN );
    primitive = _inv  mlc_inv_1 ( IQ, i_11 );
    primitive = _inv  mlc_inv_2 ( i_13, i_12 );
    primitive = _and  mlc_and_2 ( i_14, i_15, i_13 );
    primitive = _inv  mlc_inv_3 ( SN, i_14 );
    primitive = _inv  mlc_inv_4 ( RN, i_15 );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _or  mlc_or_1 ( i_16, i_17, nextstate );
    primitive = _and  mlc_and_3 ( SE, SI, i_16 );
    primitive = _and  mlc_and_4 ( D, i_18, i_17 );
    primitive = _inv  mlc_inv_5 ( SE, i_18 );
  )
)

model SDFFR_X1
  (CK, D, RN, SE,
  SI, Q, QN)
(


scan_definition (
    type = mux_scan;
    data_in = D ;
    scan_in = SI ;
    scan_enable = SE ;
    scan_out = Q, QN ;
    non_scan_model = DFFR_X1( CK, D, RN, Q, QN) ;
  )
  


  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (RN) ( )
  input (SE) ( )
  input (SI) ( )
  output (Q) ()
  output (QN) (
    instance = seq3  mlc_inst23 ( IQ, RN, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _or  mlc_or_1 ( i_6, i_7, nextstate );
    primitive = _and  mlc_and_1 ( SE, SI, i_6 );
    primitive = _and  mlc_and_2 ( D, i_8, i_7 );
    primitive = _inv  mlc_inv_2 ( SE, i_8 );
  )
)

model SDFFR_X2
  (CK, D, RN, SE,
  SI, Q, QN)
(
scan_definition (
    type = mux_scan;
    data_in = D ;
    scan_in = SI ;
    scan_enable = SE ;
    scan_out = Q, QN ;
    non_scan_model = DFFR_X2(CK, D, RN, Q, QN) ;
  )

  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (RN) ( )
  input (SE) ( )
  input (SI) ( )
  output (Q) ()
  output (QN) (
    instance = seq3  mlc_inst24 ( IQ, RN, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _or  mlc_or_1 ( i_6, i_7, nextstate );
    primitive = _and  mlc_and_1 ( SE, SI, i_6 );
    primitive = _and  mlc_and_2 ( D, i_8, i_7 );
    primitive = _inv  mlc_inv_2 ( SE, i_8 );
  )
)

model SDFFS_X1
  (CK, D, SE, SI,
  SN, Q, QN)
(

scan_definition (
    type = mux_scan;
    data_in = D ;
    scan_in = SI ;
    scan_enable = SE ;
    scan_out = Q, QN ;
    non_scan_model = DFFS_X1(CK, D, SN, Q, QN) ;
  )
  


  input (CK) ( )
  input (D) ( )
  input (SE) ( )
  input (SI) ( )
  input (SN) ( )
  output (Q) ()
  output (QN) (
    instance = seq3  mlc_inst25 ( IQ, SN, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _or  mlc_or_1 ( i_6, i_7, nextstate );
    primitive = _and  mlc_and_1 ( SE, SI, i_6 );
    primitive = _and  mlc_and_2 ( D, i_8, i_7 );
    primitive = _inv  mlc_inv_2 ( SE, i_8 );
  )
)

model SDFFS_X2
  (CK, D, SE, SI,
  SN, Q, QN)
(
scan_definition (
    type = mux_scan;
    data_in = D ;
    scan_in = SI ;
    scan_enable = SE ;
    scan_out = Q, QN ;
    non_scan_model = DFFS_X2(CK, D, SN, Q, QN) ;
  )


  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (SE) ( )
  input (SI) ( )
  input (SN) ( )
  output (Q) ()
  output (QN) (
    instance = seq3  mlc_inst26 ( IQ, SN, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _or  mlc_or_1 ( i_6, i_7, nextstate );
    primitive = _and  mlc_and_1 ( SE, SI, i_6 );
    primitive = _and  mlc_and_2 ( D, i_8, i_7 );
    primitive = _inv  mlc_inv_2 ( SE, i_8 );
  )
)

model SDFF_X1
  (CK, D, SE, SI,
  Q, QN)
(

scan_definition (
    type = mux_scan;
    data_in = D ;
    scan_in = SI ;
    scan_enable = SE ;
    scan_out = Q, QN ;
    non_scan_model = DFF_X1(CK, D, Q, QN) ;
  )
  

  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (SE) ( )
  input (SI) ( )
  output (Q) ()
  output (QN) (
    instance = seq1  mlc_inst27 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _or  mlc_or_1 ( i_6, i_7, nextstate );
    primitive = _and  mlc_and_1 ( SE, SI, i_6 );
    primitive = _and  mlc_and_2 ( D, i_8, i_7 );
    primitive = _inv  mlc_inv_2 ( SE, i_8 );
  )
)

model SDFF_X2
  (CK, D, SE, SI,
  Q, QN)
(


scan_definition (
    type = mux_scan;
    data_in = D ;
    scan_in = SI ;
    scan_enable = SE ;
    scan_out = Q, QN ;
    non_scan_model = DFF_X2(CK, D, Q, QN) ;
  )


  model_source = verilog_module;
  input (CK) ( )
  input (D) ( )
  input (SE) ( )
  input (SI) ( )
  output (Q) ()
  output (QN) (
    instance = seq1  mlc_inst28 ( IQ, nextstate, CK, NOTIFIER );
    primitive = _inv  mlc_inv_1 ( IQ, IQN );
    primitive = _buf  mlc_buf_1 ( IQ, Q );
    primitive = _buf  mlc_buf_2 ( IQN, QN );
    primitive = _or  mlc_or_1 ( i_6, i_7, nextstate );
    primitive = _and  mlc_and_1 ( SE, SI, i_6 );
    primitive = _and  mlc_and_2 ( D, i_8, i_7 );
    primitive = _inv  mlc_inv_2 ( SE, i_8 );
  )
)

model TBUF_X1
  (A, EN, Z)
(
  model_source = verilog_module;
  input (A) ( )
  input (EN) ( )
  output (Z) (
    primitive = _tsl  mlc_tsl_1 ( Z_in, Z_enable, Z );
    primitive = _buf  mlc_buf_1 ( EN, Z_enable );
    primitive = _buf  mlc_buf_2 ( A, Z_in );
  )
)

model TBUF_X16
  (A, EN, Z)
(
  model_source = verilog_module;
  input (A) ( )
  input (EN) ( )
  output (Z) (
    primitive = _tsl  mlc_tsl_1 ( Z_in, Z_enable, Z );
    primitive = _buf  mlc_buf_1 ( EN, Z_enable );
    primitive = _buf  mlc_buf_2 ( A, Z_in );
  )
)

model TBUF_X2
  (A, EN, Z)
(
  model_source = verilog_module;
  input (A) ( )
  input (EN) ( )
  output (Z) (
    primitive = _tsl  mlc_tsl_1 ( Z_in, Z_enable, Z );
    primitive = _buf  mlc_buf_1 ( EN, Z_enable );
    primitive = _buf  mlc_buf_2 ( A, Z_in );
  )
)

model TBUF_X4
  (A, EN, Z)
(
  model_source = verilog_module;
  input (A) ( )
  input (EN) ( )
  output (Z) (
    primitive = _tsl  mlc_tsl_1 ( Z_in, Z_enable, Z );
    primitive = _buf  mlc_buf_1 ( EN, Z_enable );
    primitive = _buf  mlc_buf_2 ( A, Z_in );
  )
)

model TBUF_X8
  (A, EN, Z)
(
  model_source = verilog_module;
  input (A) ( )
  input (EN) ( )
  output (Z) (
    primitive = _tsl  mlc_tsl_1 ( Z_in, Z_enable, Z );
    primitive = _buf  mlc_buf_1 ( EN, Z_enable );
    primitive = _buf  mlc_buf_2 ( A, Z_in );
  )
)

model TINV_X1
  (EN, I, ZN)
(
  model_source = verilog_module;
  input (EN) ( )
  input (I) ( )
  output (ZN) (
    primitive = _tsl  mlc_tsl_1 ( ZN_in, ZN_enable, ZN );
    primitive = _buf  mlc_buf_1 ( EN, ZN_enable );
    primitive = _inv  mlc_inv_1 ( I, ZN_in );
  )
)

model TLAT_X1
  (D, G, OE, Q)
(
  model_source = verilog_module;
  input (D) ( )
  input (G) ( )
  input (OE) ( )
  output (Q) (
    primitive = _tsl  mlc_tsl_1 ( Q_in, Q_enable, Q );
    primitive = _inv  mlc_inv_1 ( OE, Q_enable );
    instance = seq4  mlc_inst29 ( IQ, nextstate, G, NOTIFIER );
    primitive = _buf  mlc_buf_1 ( IQ, Q_in );
    primitive = _buf  mlc_buf_2 ( D, nextstate );
  )
)

model XNOR2_X1
  (A, B, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_42, ZN );
    primitive = _xor  mlc_xor_1 ( A, B, i_42 );
  )
)

model XNOR2_X2
  (A, B, ZN)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  output (ZN) (
    primitive = _inv  mlc_inv_1 ( i_42, ZN );
    primitive = _xor  mlc_xor_1 ( A, B, i_42 );
  )
)

model XOR2_X1
  (A, B, Z)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  output (Z) (
    primitive = _xor  mlc_xor_1 ( A, B, Z );
  )
)

model XOR2_X2
  (A, B, Z)
(
  model_source = verilog_module;
  input (A) ( )
  input (B) ( )
  output (Z) (
    primitive = _xor  mlc_xor_1 ( A, B, Z );
  )
)

//model active_high_latch (CLK, D, Q) (
//   cell_type = latch;
//   input (D) (data_in)
//   input (CLK) (active_high_clock)
//   output (Q) (data_out)
//   (
//      primitive = _dlat( , ,CLK,D,Q, );
//   )
//)

//model SDLL_X1
//  (D,GN,SE, SI,
//  Q)
//(
//
//scan_definition (
//    type = mux_scan;
//    data_in = D ;
//    scan_in = SI ;
//    scan_enable = SE ;
//    scan_out = Q;
//    non_scan_model = DLL_X1(D,GN,Q) ;
//  )
//  
//
//  model_source = verilog_module;
//  input (D) ( )
//  input (GN) ( )
//  input (SE) ( )
//  input (SI) ( )
//  output (Q) (
//    instance = seq4  mlc_inst27 ( IQ, nextstate, GN, NOTIFIER );
//    primitive = _buf  mlc_buf_1 ( IQ, Q );
//    primitive = _or  mlc_or_1 ( i_6, i_7, nextstate );
//    primitive = _and  mlc_and_1 ( SE, SI, i_6 );
//    primitive = _and  mlc_and_2 ( D, i_8, i_7 );
//    primitive = _inv  mlc_inv_2 ( SE, i_8 );
//  )
//)
//
//model SDLL_X2
//  (D,GN,SE, SI,
//  Q)
//(
//
//scan_definition (
//    type = mux_scan;
//    data_in = D ;
//    scan_in = SI ;
//    scan_enable = SE ;
//    scan_out = Q;
//    non_scan_model = DLL_X2(D,GN,Q) ;
//  )
//  
//
//  model_source = verilog_module;
//  input (D) ( )
//  input (GN) ( )
//  input (SE) ( )
//  input (SI) ( )
//  output (Q) (
//    instance = seq4  mlc_inst27 ( IQ, nextstate, GN, NOTIFIER );
//    primitive = _buf  mlc_buf_1 ( IQ, Q );
//    primitive = _or  mlc_or_1 ( i_6, i_7, nextstate );
//    primitive = _and  mlc_and_1 ( SE, SI, i_6 );
//    primitive = _and  mlc_and_2 ( D, i_8, i_7 );
//    primitive = _inv  mlc_inv_2 ( SE, i_8 );
//  )
//)
